#Stock price
#Python code to extract the stock price dynamically from Yahoo.Finance
#Since Yahoo uses Unix Time Stamp (Epoch) in the HTML link, the current time and start time (set as 2 years ago) is converted as Epoch time first using Python code

from datetime import date
import time
import calendar
from datetime import datetime
from dateutil.relativedelta import relativedelta
import pandas as pd

now = datetime.now() #get today's date

last2year = now + relativedelta(years=-2) #get the date 2 years ago from today

current_date_and_time = time.time() #get the current epoch time

LastDate = int(current_date_and_time) #change the current date into integer format so as to fit into CSV link below

last2year_string = last2year.strftime("%a %b %d %H:%M:%S %Y")

StartDate = int(calendar.timegm(time.strptime(last2year_string))) #get the epoch time for the date 2 years ago and convert it to integer

Tickers = ['TSCO.L', 'SBRY.L', '3382.T', 'CA.PA', 'AXFO.ST', 'KR', 'WMT'] #ticker list

dataset = {} #create a dictionary object for containing the stock price for every ticker

#iterate each ticker in the ticker list
for Ticker in Tickers:
        #read the csv file dynamically for every ticker
	df = pd.read_csv(f'https://query1.finance.yahoo.com/v7/finance/download/{Ticker}?period1={StartDate}&period2={LastDate}&interval=1d&events=history&includeAdjustedClose=true')
	df['Ticker'] = Ticker
	dataset[Ticker] = df
	#time.sleep(1)

StockPrice = pd.concat(dataset) #put stock prices of all tickers together in one table 
StockPrice = StockPrice.reset_index(drop = True) #reser the index

######################################################################################################################################################################
#Extract financial data from Reuters
#Use of python code for web scrapping HTML codes

import requests  
import pandas as pd
from bs4 import BeautifulSoup 

RICs = ['TSCO.L', 'SBRY.L', '3382.T', 'CARR.PA', 'AXFO.ST', 'KR.N', 'WMT.N'] #ticker list

dataset = {} #create a dictionary for containing the financial summary data for every ticker

#iterate every ticker for webscrapping
for RIC in RICs:
    # request the HTML codes of a particular ticker
    data = requests.get(f'https://www.reuters.com/markets/companies/{RIC}/').content
    soup = BeautifulSoup(data, "html.parser")

    #look for html tag <dd> with specified classes   
    table_rows1 = soup.find_all("dd", {"class": "text__text__1FZLe text__dark-grey__3Ml43 text__medium__1kbOh text__body_fixed__1I7Al company-profile-maximizer__value__vLvbK"})
    table_rows2 = soup.find_all("dd", {"class": "text__text__1FZLe text__dark-grey__3Ml43 text__regular__2N1Xr text__body_fixed__1I7Al company-profile-maximizer__amount__1Ftq4"})
    summary_data = pd.DataFrame(columns=["RIC", "Previous Close", "Open", "Volume", "3 Month Average Trading Volume", "Shares Out (Mil)", "Market Cap", "Forward P/E", "Dividend Yield", "P/E Excl. Extra Items (TTM)", "Price To Sales (TTM)", "Price To Book (Quarterly)", "Price To Cash Flow (Per Share TTM)", "Total Debt/Total Equity (Quarterly)", "Long Term Debt/Equity (Quarterly)", "Return On Investment (TTM)", "Return On Equity (TTM)"])

    #extracting relevant data from the above html code
    close = table_rows1[0].text
    open = table_rows1[1].text
    volume = table_rows1[2].text
    trading_vol = table_rows1[3].text
    shares = table_rows1[4].text
    market_cap = table_rows1[5].text
    forward_PE = table_rows1[6].text
    dividend_yield = table_rows1[7].text
    
    PER = table_rows2[0].text
    PS = table_rows2[1].text
    PB = table_rows2[2].text
    PCF = table_rows2[3].text
    total_gearing = table_rows2[4].text
    longterm_gearing = table_rows2[5].text
    ROI = table_rows2[6].text
    ROE = table_rows2[7].text

    #fill in the columns of the summary_data table    
    summary_data = summary_data.append({"RIC": RIC, "Previous Close":close, "Open":open, "Volume":volume, "3 Month Average Trading Volume": trading_vol, "Shares Out (Mil)": shares, "Market Cap": market_cap, "Forward P/E": forward_PE, "Dividend Yield": dividend_yield, "P/E Excl. Extra Items (TTM)": PER, "Price To Sales (TTM)": PS, "Price To Book (Quarterly)": PB, "Price To Cash Flow (Per Share TTM)": PCF, "Total Debt/Total Equity (Quarterly)": total_gearing, "Long Term Debt/Equity (Quarterly)": longterm_gearing, "Return On Investment (TTM)": ROI, "Return On Equity (TTM)": ROE}, ignore_index=True)

    #fill in the dictionary with the summary_data for every ticker using RIC as the key
    dataset[RIC] = summary_data

Summary = pd.concat(dataset) #merge the summary_data of all tickers into a dataframe called Summary
Summary = Summary.reset_index(drop = True) #reset the new index for the merged dataframe

Summary

